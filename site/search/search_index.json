{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"My HomeLab","text":""},{"location":"#inspiration","title":"Inspiration","text":"<p>Most of the inspiration comes from this guys here:  </p> <ul> <li>Awesome-Selfhosted Website </li> <li>Awesome-Selfhosted GitHub </li> </ul>"},{"location":"#systems-and-other-hardware","title":"Systems and other Hardware","text":"<p>I will List my Hardware here</p>"},{"location":"#nab6-mini-pc","title":"NAB6 mini PC","text":"<p>Main Server, High Power</p> <p></p>"},{"location":"#macmini-late-2012","title":"Macmini Late 2012","text":"<p>Second Server, Low Power</p> <p></p>"},{"location":"#raspberry-pi-4","title":"Raspberry Pi 4","text":"<p>Pi-Hole and such</p> <p></p>"},{"location":"#software","title":"Software","text":""},{"location":"#os","title":"OS","text":"<ul> <li> Proxmox</li> <li> Ubuntu</li> <li> Debian</li> </ul>"},{"location":"#terminal-stuff","title":"Terminal stuff","text":""},{"location":"#nala","title":"Nala","text":"<pre><code>sudo apt install nala\n</code></pre> Explanation <ul> <li>is an alternative to <code>apt</code></li> <li>use  <pre><code>sudo nala update &amp;&amp; sudo nala upgrade -yy\n</code></pre> instead of  <pre><code>sudo apt update &amp;&amp; sudo apt upgrade -yy\n</code></pre></li> </ul>"},{"location":"#neofetch","title":"neofetch","text":"<ul> <li>Shows your Systeminfo</li> </ul> Explanation <ul> <li>See config here: config.conf</li> <li>README.md </li> <li>My .bashrc  runs this on every startup</li> </ul>"},{"location":"#docker-containers","title":"Docker Containers","text":"<p>GitHub</p> <p>for the compose files see: docker-compose files in the  GitHub Repo </p> Name Description Location <code>arr-stack.yml</code>  downloading and stuff... HomeLab/stacks/arr-stack/compose.yaml <code>placeholder.yml</code>  placeholder placeholder"},{"location":"Docker/Docker/","title":"Docker","text":"<p>show logs in terminal of the Docker conatiner <pre><code>docker logs --timestamps --follow CONTAINERID\n</code></pre></p>"},{"location":"Docker/Portainer/portainer/","title":"Use one .env file and Link to it","text":"<p>its very simple just do it like this</p> <pre><code>version: '3' # (1)!\nenv_file:\n  - /path/to/your/.env\n\nservices:\n  your_service:\n    image: your_image\n    environment:\n      - DB_PASSWORD=${DB_PASSWORD}\n    # other service configurations\n</code></pre> <ol> <li> it needs at least version 3 </li> </ol> <p>and then make your <code>.env</code> file look something like this: <pre><code>DB_PASSWORD=KJBIWUJBdwihdbuazowdgh786287z9bidjhqb8hq27hp298h28d\n</code></pre></p> <p>Tip</p> <p>Like this you can create one big <code>.env</code> file, save it somewhere accesible (in my case the folder where I keep all my docker stuff) and then you can link all your containers to it</p>"},{"location":"Docker/Portainer/portainer/#update-portainer-community-edition","title":"Update Portainer Community Edition","text":"<p>Stop and remove your existing Portainer instance. This will not affect your other Docker containers.</p> <pre><code>sudo docker stop portainer &amp;&amp; sudo docker rm portainer\n</code></pre> <p>Pull the latest Portainer-CE image.</p> <pre><code>docker pull portainer/portainer-ce:latest\n</code></pre> <p>Deploy the new Portainer container.</p> <pre><code>docker run -d -p 9000:9000 -p 8000:8000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:latest\n</code></pre> <p>Warning</p> <p>You may need to run these commands as root/sudo if you're not logged in as root.</p>"},{"location":"Home/todo/","title":"ToDo","text":""},{"location":"Home/todo/#todo","title":"ToDo","text":""},{"location":"Home/todo/#general-stuff","title":"General Stuff","text":"<ul> <li> Delete old HomeLab GitHub Repo</li> </ul>"},{"location":"Home/todo/#mkdocs","title":"MkDocs","text":"<ul> <li> Change GitHub image Links<ul> <li> Proxmox</li> </ul> </li> </ul>"},{"location":"Home/todo/#pages","title":"Pages","text":""},{"location":"Home/todo/#minecraft","title":"Minecraft","text":"<ul> <li> Adjust Links to <code>Proxmox Ubuntu LXC Container</code></li> </ul>"},{"location":"Home/tools/","title":"My most used tools","text":"<ul> <li> Iconsearch</li> <li> Admonition Types</li> </ul>"},{"location":"Minecraft/better-minecraft-4/","title":"ToDo","text":"<ul> <li> Bamboo- or Kelpfarm for smelting</li> <li> Bonemeal Composter for rotten food and Seeds<ul> <li> Create a Filter Cable that just imports seed until there are 5 Stacks left</li> <li> Same for Poppys</li> </ul> </li> <li> <p> Forceload Basechunks</p> <ul> <li> set it up that they are forceloaded, even if im offline</li> </ul> <p>Tip</p> <p>I created a claim, made it accessible to everyone and the Forceload this Claimchunks and set it to also load when offline</p> <ul> <li> Storage filter for max iron/poppys/kelp/bamboo (all the automatic Farms)</li> <li> Add additional Farms</li> <li> <p> Carrot</p> </li> <li> <p> Potato (1)</p> <ol> <li>Needs to be double checked, i just added some <code>Potato Seeds</code> in the <code>Carrot Farm</code></li> </ol> </li> <li> <p> Wheat</p> </li> </ul> </li> </ul>"},{"location":"Minecraft/better-minecraft-4/#general-info","title":"General Info","text":""},{"location":"Minecraft/better-minecraft-4/#modpack","title":"Modpack","text":"<p>Better Minecraft 4 [FORGE]</p>"},{"location":"Minecraft/better-minecraft-4/#seed","title":"Seed","text":"<pre><code>393358025\n</code></pre>"},{"location":"Minecraft/server-setup/","title":"Server Setup","text":""},{"location":"Minecraft/server-setup/#install-and-setup-proxmox-lxc-and-crafty-controller-4","title":"Install and Setup Proxmox LXC and Crafty Controller 4","text":"<ol> <li> <p>My Server runs on a Proxmox Ubuntu LXC Container</p> </li> <li> <p>Install Crafty Controller 4 According to the official Guide</p> </li> </ol>"},{"location":"Minecraft/server-setup/#here-is-the-tldr-version-of-this-guide","title":"Here is the TLDR Version of this Guide","text":"<ul> <li> <p>now you should be able to access the Crafty Controller via <code>https://YOUR_SERVER_IP:8443</code></p> <p>Default Login</p> <p>Username: <code>admin</code> Password: <code>crafty</code></p> </li> </ul>"},{"location":"Minecraft/server-setup/#automated-install-script-quick","title":"Automated Install Script (Quick)","text":"<p>Please ensure your distro's packages are up-to-date and Git is present before installing Crafty:</p> <pre><code>sudo apt update &amp;&amp; sudo apt upgrade &amp;&amp; sudo apt install git\n</code></pre> <p>One line installer</p> <p><code>yaml git clone https://gitlab.com/crafty-controller/crafty-installer-4.0.git &amp;&amp; \\  cd crafty-installer-4.0 &amp;&amp; \\  sudo ./install_crafty.sh</code></p> <p>Once installation is complete to run Crafty manually run the following. Note that if you used a directory other then the default to install Crafty you will need to cd into that directory.</p> <pre><code>sudo su crafty\n</code></pre> <pre><code>cd /var/opt/minecraft/crafty\n</code></pre> <pre><code>./run_crafty.sh\n</code></pre> <p>Info</p> <p>If you said yes to adding a service file you may run the following to start Crafty <pre><code>sudo systemctl start crafty`\n</code></pre></p> <p>If you added a service file and want to have Crafty start automatically on system boot please run the following:</p> <pre><code>sudo systemctl enable crafty`\n</code></pre>"},{"location":"Minecraft/server-setup/#create-your-servers-in-crafty-controller-4","title":"Create your Servers in Crafty Controller 4","text":"<ul> <li> <p>I used this Guide to create my Better MineCraft 4 Server</p> <ul> <li>Basically it is this<ul> <li>Create a Forge Server</li> </ul> </li> <li>Fill out all the necessary details</li> <li><ul> <li> Modded</li> <li> forge</li> <li> Server Version (Check the one needed from you Modpack)</li> <li> Set the Memory (4/16 seems to work just fine)</li> <li> Set the Server Port</li> <li> Build Server!</li> <li>Download the Modpack you want from Curse-Forge make sure download the <code>Server Pack</code>, not the regular one<ul> <li></li> </ul> </li> </ul> </li> <li> <p>Upload the ZIP File</p> <ul> <li></li> </ul> <p>Tip</p> <p>you might run in to the issue that it isnt uploading, that means you need to adjust the streamsize in here to 10GB or 100GB (if it is bigger the 1GB): location of config.json<pre><code>sudo nano /var/opt/minecraft/crafty/crafty-4/app/config/config.json\n</code></pre></p> <p></p> </li> </ul> </li> <li> <p>when it autorefreshed and for that matter uploaded, Rightclick to extract</p> </li> <li>Adjust the <code>server.properties</code>, <code>whitelist.json</code> and <code>ops.json</code> (or do it ingame afterwords)<ul> <li>my default server.properties ( Link) are</li> </ul> </li> </ul> server.properties<pre><code>#Minecraft server properties\n#Tue Dec 12 03:04:02 CET 2023\nallow-flight=false\nallow-nether=true\nbroadcast-console-to-ops=false\nbroadcast-rcon-to-ops=false\ndifficulty=normal\nenable-command-block=false\nenable-jmx-monitoring=false\nenable-query=false\nenable-rcon=false\nenable-status=true\nenforce-secure-profile=true\nenforce-whitelist=true\nentity-broadcast-range-percentage=100\nforce-gamemode=false\nfunction-permission-level=2\ngamemode=survival\ngenerate-structures=true\ngenerator-settings={}\nhardcore=false\nhide-online-players=false\ninitial-disabled-packs=\ninitial-enabled-packs=vanilla\nlevel-name=world\nlevel-seed=\nlevel-type=minecraft\\:normal\nmax-chained-neighbor-updates=1000000\nmax-players=4\nmax-tick-time=60000\nmax-world-size=29999984\nmotd=-\\=GSB Better Minecraft 4 Server\\=-\nnetwork-compression-threshold=256\nonline-mode=true\nop-permission-level=4\nplayer-idle-timeout=0\nprevent-proxy-connections=false\npvp=false\nquery.port=25565\nrate-limit=0\nrcon.password=\nrcon.port=25575\nrequire-resource-pack=false\nresource-pack=\nresource-pack-prompt=\nresource-pack-sha1=\nserver-ip=192.168.1.114\nserver-port=25567\nsimulation-distance=15\nspawn-animals=true\nspawn-monsters=true\nspawn-npcs=true\nspawn-protection=0\nsync-chunk-writes=true\ntext-filtering-config=\nuse-native-transport=true\nview-distance=15\nwhite-list=true\n</code></pre> <ul> <li>Adjust the <code>configs</code> with the right <code>IP</code>, <code>Port</code> and the <code>Autostart</code>, <code>Crash Detection</code> and <code>Show on Public Status Page</code> Toggle<ul> <li></li> </ul> </li> <li>Go to Backups and set, how the Server gets backed up and how many Backups it keeps<ul> <li></li> </ul> </li> <li>and then Sheduale a Backup (i also added some Warning Messages before)</li> <li></li> <li>Now go to the Terminal in Crafty Control and Start the Server</li> </ul>"},{"location":"Minecraft/server-setup/#make-server-accessible-from-outside","title":"Make Server Accessible from outside","text":"<ul> <li> <p>Cloudflare DDNS Updater (Docker)     My current docker-compose.yaml<pre><code>version: \"3\"\nservices:\ncloudflare-ddns-updater:\n    image: favonia/cloudflare-ddns:latest\n    network_mode: host\n    cap_add:\n    - SETUID # Leave this alone, as is\n    - SETGID # Leave this alone, as is\n    cap_drop:\n    - all\n    read_only: true\n    security_opt:\n    - no-new-privileges:true\n    environment:\n    - PUID=1000\n    - PGID=1000\n    - CF_API_TOKEN=${CF_API_TOKEN} # (1)!\n    - DOMAINS=${DOMAINS} # (2)!\n    - PROXIED=true\n    - IP6_PROVIDER=none\n    restart: unless-stopped\n</code></pre></p> <ol> <li>The value of <code>CF_API_TOKEN</code> should be an API token (not an API key), which can be obtained from the API Tokens page. Use the <code>Edit zone DNS</code> template to create and copy a token into the environment file. (The less secure API key authentication is deliberately not supported.)</li> <li>Example: <pre><code>yourdomain.com, *.yourdomain.com`   \n</code></pre> or in the .env file <pre><code>DOMAINS=yourdomain.com, *.yourdomain.com\n</code></pre></li> </ol> </li> <li> <p>This will then create the <code>A-Record</code> for you and keeps it up to date     </p> </li> <li> <p><code>CNAME</code> bmc (Proxied)     </p> </li> <li><code>SRV</code> </li> </ul>"},{"location":"Proxmox/proxmox/","title":"Proxmox","text":""},{"location":"Proxmox/proxmox/#proxmox-helper-scripts","title":"Proxmox Helper Scripts","text":""},{"location":"Proxmox/proxmox/#mounting-nfs-shares-nas-shares","title":"Mounting NFS shares (NAS Shares)","text":"<p>in case you run a Proxmox CT container und need to give it access to NFS (and SMB if needed) it need to be a priviliged container (just doubleclick on <code>Features</code> and enable it on a stopped/Shutdown Container)</p> <p></p>"},{"location":"Proxmox/proxmox/#use-my-script","title":"Use my Script","text":"<ol> <li>Go to home directory<code>cd ~</code></li> <li>create the mount_nfs.sh <pre><code>sudo nano mount_nfs.sh\n</code></pre></li> <li>copy the contents from mount_nfs.sh and ad it Ctrl+X Y Enter to save it</li> <li>make it executable  <pre><code>sudo chmod +x mount_nfs.sh\n</code></pre></li> <li>run it  <pre><code>./mount_nfs.sh`\n</code></pre></li> </ol>"},{"location":"Proxmox/proxmox/#do-it-manually","title":"Do it manually","text":"<p>If that didnt work, ChatGPT gave me this, and that worked always</p> <ol> <li> <p>Update Package Lists: <pre><code>apt update &amp;&amp; apt upgrade -y\n</code></pre></p> </li> <li> <p>Install NFS Client: <pre><code>apt install -y nfs-common\n</code></pre></p> </li> <li> <p>Create Mount Point: <pre><code>mkdir -p /mnt/DS920_docker # (1)!\n</code></pre></p> <ol> <li>This command creates the directory <code>/mnt/DS920_docker</code>.   The <code>-p</code> flag ensures that the command doesn't throw an error if the directory already exists.</li> </ol> </li> <li> <p>Mount the NFS Share: <pre><code>mount -t nfs 192.168.1.222:/volume1/docker /mnt/DS920_docker # (1)!\n</code></pre></p> <ol> <li>This command mounts the NFS share located at <code>192.168.1.222:/volume1/docker</code> to the local directory <code>/mnt/DS920_docker</code>.</li> </ol> </li> <li> <p>Check the Mount: <pre><code>df -h # (1)!\n</code></pre></p> <ol> <li>Verifies that the NFS share is successfully mounted. You should see it listed among the mounted filesystems.</li> </ol> </li> <li> <p>Automount on Boot (Optional):    To ensure the NFS share is mounted automatically on system boot, add an entry to the <code>/etc/fstab</code> file. Open the file using a text editor (e.g., nano):</p> </li> </ol> <pre><code>nano /etc/fstab\n</code></pre> <p>Add the following line at the end:    <pre><code>192.168.1.222:/volume1/docker /mnt/DS920_docker nfs defaults 0 0\n</code></pre></p> <p>Save and exit the text editor.</p> <ol> <li>Unmount NFS Share (If Needed):    To unmount the NFS share, use the following command:    <pre><code>umount /mnt/DS920_docker\n</code></pre></li> </ol> <p>Now, your Synology NAS NFS share should be successfully mounted to <code>/mnt/DS920_docker</code> on your Debian Proxmox CT.  If you added an entry to <code>/etc/fstab</code>, the share will also be mounted automatically upon system boot.  </p> <p>My <code>fstab</code> looks like this</p> <pre><code># UNCONFIGURED FSTAB FOR BASE SYSTEM\n192.168.1.115:/nfs/MediaHub_PR4100 /mnt/PR4100_MediaHUB nfs defaults 0 0\n192.168.1.222:/volume1/docker /mnt/DS920_docker nfs defaults 0 0\n</code></pre>"},{"location":"Proxmox/proxmox/#access-proxmox-via-cloudflare-tunnels","title":"Access Proxmox via Cloudflare Tunnels","text":"<p>Make sure <code>No TLS Verify</code> is checked </p>"},{"location":"Proxmox/proxmox/#grow-file-size","title":"Grow File Size","text":"<p>Resize (add storage) in the Hardware Section, then</p> <p>Hardware  Harddisk  Disk Action  Resize</p> <p>Then open the console and type</p> <pre><code>sudo growpart /dev/sda 3\n</code></pre> <p>And then allocate it with</p> <pre><code>sudo resize2fs /dev/sda3\n</code></pre>"},{"location":"Website%20Stuff/MkDocs/mkdocs/","title":"MkDocs","text":"<p>For full documentation visit mkdocs.org and Material for MkDocs.</p>"},{"location":"Website%20Stuff/MkDocs/mkdocs/#useful-stuff","title":"Useful Stuff","text":"<ul> <li> icon search</li> <li>Admonition Types (Tips, Warnings, etc)</li> </ul>"},{"location":"Website%20Stuff/MkDocs/mkdocs/#edit-website","title":"Edit Website","text":""},{"location":"Website%20Stuff/MkDocs/mkdocs/#in-github","title":"in  GitHub","text":"<p>Info</p> <p>You can also edit the page directly on github. Cloudflare Pages will update the Live Page after you commit the Changes</p>"},{"location":"Website%20Stuff/MkDocs/mkdocs/#in-vs-code","title":"in  VS Code","text":"<ol> <li>Open Website in  VS CODE</li> </ol> <p>Open VSCode via Terminal</p> <ul> <li>Open Terminal</li> <li> <p>Navigate to you Site</p> <pre><code>cd X:\\OneDrive\\Documents\\GitHub\\mkdocs-material # (1)!\n</code></pre> <ol> <li>Example</li> </ol> <p>open  VS Code on this location with </p> <pre><code>code . # (1)!\n</code></pre> <ol> <li>minde the Space between <code>code</code> and <code>.</code></li> </ol> </li> </ul> <p>Open VSCode via GitHub Desktop</p> <p>I usually access it via  GitHub Desktop</p> <p></p> <ol> <li> <p>Preview on http://localhost:8000/ (Just type the following commands in the Terminal in VS Code)</p> Command<pre><code>mkdocs serve\n</code></pre> Expected Output<pre><code>PS X:\\OneDrive\\Documents\\GitHub\\mkdocs-material&gt; mkdocs serve # (1)!\nINFO    -  Building documentation...\nINFO    -  Cleaning site directory\nINFO    -  Documentation built in 0.44 seconds\nINFO    -  [20:07:01] Watching paths for changes: 'docs', 'mkdocs.yml'\nINFO    -  [20:07:01] Serving on http://127.0.0.1:8000/\nINFO    -  [20:07:03] Browser connected: http://localhost:8000/\n</code></pre> <ol> <li>This Command will run the live preview on http://localhost:8000/ , you can exit it with Ctrl+C </li> </ol> </li> <li> <p>If you are happy with it Ctrl+C to exit, and run     Command<pre><code>mkdocs build\n</code></pre></p> Expected Output<pre><code>PS X:\\OneDrive\\Documents\\GitHub\\mkdocs-material&gt; mkdocs build\nINFO    -  Cleaning site directory\nINFO    -  Building documentation to directory: X:\\OneDrive\\Documents\\GitHub\\mkdocs-material\\site\nINFO    -  Documentation built in 0.80 seconds\n</code></pre> </li> <li> <p><code>Commit</code> and <code>Push/Sync</code> to  GitHub (usually via VSCode or GitHub Desktop)</p> </li> </ol>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2023/12/13/just-a-test-blogpost/","title":"Just a Test Blogpost","text":"<p>Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.</p>"},{"location":"scripts-and-snippets/neofetch/","title":"Index","text":"<p>This config lives in </p> <p><pre><code>/root/.config/neofetch/config.conf\n</code></pre> if you only have a <code>root</code> user</p> <p>or in </p> <p><pre><code>/home/$USER/.config/neofetch/config.conf\n</code></pre> if you have a <code>home</code> for your users</p>"},{"location":"blog/archive/2023/","title":"2023","text":""},{"location":"blog/category/blog/","title":"Blog","text":""}]}